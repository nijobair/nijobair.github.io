function loadChallenge(e){if(window.history.pushState({challengeID:e},`Challenge ${e}`,`?challenge=${e}`),currentChallengeID=e,!SQL)return void console.error("SQL.js is not initialized");const t="/sqlChallengeHub/challenges.json";fetch(t).then(e=>{if(!e.ok)throw new Error(`Failed to fetch ${t}: ${e.statusText}`);return e.json()}).then(t=>{totalChallenges=t.length;const n=t.find(t=>t.id===e);if(!n)throw new Error(`Challenge with id ${e} not found`);hint=n.hint,displayChallengeDetails(n),resetQueryAndResult(),db=new SQL.Database,loadTables(n.tables||[n.table]);const l=document.getElementById("query-input");editor?editor.setValue(""):editor=CodeMirror.fromTextArea(l,{mode:"text/x-sqlite",extraKeys:{"Ctrl-Enter":executeQuery,"Cmd-Enter":executeQuery,F11:function(e){e.setOption("fullScreen",!e.getOption("fullScreen"))},Esc:function(e){e.getOption("fullScreen")&&e.setOption("fullScreen",!1)}},autoCloseBrackets:!0,matchBrackets:!0,highlightSelectionMatches:{showToken:!1}});const o=document.getElementById("challenge-container");o&&o.scrollIntoView({behavior:"smooth",block:"center"})}).catch(e=>console.error("Error loading challenge:",e))}function displayChallengeDetails(e){const t=document.getElementById("challenge-container");t.innerHTML=`\n        <h2>Challenge ${e.id}</h2>\n        <p><strong>Category:</strong> ${e.category}</p>\n        <p><strong>Title:</strong> ${e.title}</p>\n        <p><strong>Difficulty:</strong> ${generateStars(e.difficulty)}</p>\n        <p><strong>Description:</strong> ${e.description}</p>\n        <div id="table-container"></div>\n    `}function generateStars(e){const t=5;let n="";for(let t=0;t<e;t++)n+="â˜…";for(let l=e;l<t;l++)n+="â˜†";return n}function resetQueryAndResult(){editor&&editor.setValue("");const e=document.getElementById("result-output");e.placeholder=resultPlaceHolder,e.value="",e.style.width="",e.style.height="",document.getElementById("challenge-list").style.display="none",document.getElementById("sql-playground-app").style.display="flex",editor&&editor.focus();const t=document.getElementById("result-message");t&&t.remove()}function loadTables(e){const t=document.getElementById("table-container");t.innerHTML="",e.forEach(e=>{fetch(`/sqlChallengeHub/tables/${e}.sql`).then(t=>{if(!t.ok)throw new Error(`Failed to fetch /sqlChallengeHub/tables/${e}.sql: ${t.statusText}`);return t.text()}).then(t=>{db.run(t),displayTableData(e)}).catch(e=>console.error("Error loading table:",e))})}function displayTableData(e){const t=document.getElementById("table-container"),n=`SELECT * FROM ${e} LIMIT 9;`,l=`SELECT COUNT(*) AS total FROM ${e};`;try{const o=db.exec(l),r=o[0].values[0][0],s=db.exec(n);if(s.length>0){const n={columns:s[0].columns,rows:s[0].values};let l=`<p><strong>Table:</strong> <code>${e}</code>${r>9?" <i>(first 9 rows)</i>":""}</p><table class="related-table" border="1"><thead><tr>`;n.columns.forEach(e=>{l+=`<th>${e}</th>`}),l+="</tr></thead><tbody>",n.rows.forEach(e=>{l+="<tr>",e.forEach(e=>{l+=`<td>${e}</td>`}),l+="</tr>"}),l+="</tbody></table>",t.innerHTML+=l}else t.innerHTML+=`<p><strong>Table:</strong> ${e} <i>(no data)</i></p>`}catch(e){console.error("Error displaying table data:",e)}}function executeQuery(){const e=editor.getValue();if(isReadOnlyQuery(e))try{const t=db.exec(e);if(t.length>0){const e={columns:t[0].columns,rows:t[0].values};displayQueryResult(e),compareResults(currentChallengeID,e)}else document.getElementById("result-output").value="No results"}catch(e){document.getElementById("result-output").value=`Error: ${e.message}`}else document.getElementById("result-output").value="Error: Only SELECT queries are allowed."}function displayQueryResult(e){const t=normalizeResult(e),n=e.columns.map((e,n)=>Math.max(e.length,...t.map(e=>e[n].length)));let l="| "+e.columns.map((e,t)=>e.padEnd(n[t])).join(" | ")+" |\n";l+="| "+n.map(e=>"-".repeat(e)).join(" | ")+" |\n",t.forEach(e=>{l+="| "+e.map((e,t)=>e.padEnd(n[t])).join(" | ")+" |\n"}),document.getElementById("result-output").value=l}function isReadOnlyQuery(e){const t=["INSERT","UPDATE","DELETE","DROP","ALTER"],n=e.toUpperCase();return!t.some(e=>n.includes(e))}function compareResults(e,t){const n=`/sqlChallengeHub/results/result${e}.sql`;fetch(n).then(e=>{if(!e.ok)throw new Error(`Failed to fetch ${n}: ${e.statusText}`);return e.text()}).then(e=>{const n=db.exec(e)[0];if(!n)return void displayErrorMessage("Error: No result was found to compare your output.");const l={columns:n.columns,rows:n.values};if(normalizeResult(t),normalizeResult(l),t.rows.length!==l.rows.length)return void displayErrorMessage("The result does not match the expected result. Please try again.");const o=new Set(t.rows.map(e=>JSON.stringify(e))),r=new Set(l.rows.map(e=>JSON.stringify(e)));let s=!0;for(const e of r)if(!o.has(e)){s=!1;break}s?(displayFireworks(),displaySuccessMessage("Congratulations! You have successfully completed the challenge.")):displayErrorMessage("The result does not match the expected result. Please try again.")}).catch(e=>console.error("Error comparing results:",e))}function displaySuccessMessage(e){displayMessage(e,"green")}function displayErrorMessage(e){displayMessage(e,"red")}function displayMessage(e,t){const n=document.getElementById("query-result"),l=document.getElementById("result-message");l&&l.remove();const o=document.createElement("div");o.id="result-message",o.textContent=e,o.style.color=t,o.style.textAlign="center",n.appendChild(o)}function normalizeResult(e){return e.rows.map(e=>e.map(e=>null===e?"NULL":"boolean"==typeof e?e?"TRUE":"FALSE":isNaN(e)||"boolean"==typeof e?e:String(e)))}function displayFireworks(){const e=document.createElement("div");e.id="fireworks-container",e.style.position="fixed",e.style.top="0",e.style.left="0",e.style.width="100%",e.style.height="100%",e.style.zIndex="9999",document.body.appendChild(e);const t=new Fireworks(e,{speed:2,acceleration:1.05,friction:.97,gravity:1.5,particles:50,trace:3,explosion:9,boundaries:{top:50,bottom:e.clientHeight,left:50,right:e.clientWidth}});t.start(),setTimeout(()=>{t.stop(),document.body.removeChild(e)},3e3)}function showChallengeList(){window.history.pushState({},document.title,window.location.pathname),document.getElementById("sql-playground-app").style.display="none",document.getElementById("challenge-list").style.display="block"}function clearQuery(){resetQueryAndResult()}function showAnswer(){const e=`/sqlChallengeHub/results/result${currentChallengeID}.sql`;fetch(e).then(t=>{if(!t.ok)throw new Error(`Failed to fetch ${e}: ${t.statusText}`);return t.text()}).then(e=>{editor.setValue(e)}).catch(e=>{console.error("Error fetching the query:",e)})}function showHint(){const e=document.getElementById("result-output");e.value="",e.placeholder=hint}function nextChallenge(){if(currentChallengeID<totalChallenges){const e=currentChallengeID+1;loadChallenge(e)}else alert("You have completed all the challenges. Congratulations! ðŸŽ‰")}function previousChallenge(){if(currentChallengeID>1){const e=currentChallengeID-1;loadChallenge(e)}else alert("There are no previous challenges.")}let db,SQL,currentChallengeID,hint,totalChallenges,editor;const resultPlaceHolder="Write a query and click the `Run Query` button or press `Ctrl + Enter` to see the result...";document.addEventListener("DOMContentLoaded",()=>{initSqlJs({locateFile:e=>`https://cdnjs.cloudflare.com/ajax/libs/sql.js/1.6.2/${e}`}).then(e=>{SQL=e,db=new SQL.Database;const t=new URLSearchParams(window.location.search),n=t.get("challenge");n&&loadChallenge(parseInt(n))}).catch(e=>console.error("Error initializing SQL.js:",e))});